import cocoa.*;
import cocoa.appkit.*;
import cocoa.corefoundation.*;
import Vinyl.appdelegate.*;
import Vinyl.library.*;
import Vinyl.library.datasources.*;
import Vinyl.qtplayer.*;
import Vinyl.controllers.importer.*;
import Vinyl.formatting.*;
import Vinyl.controls.playinfoview.*;
import Vinyl.controls.application.*;
import libc;
import maybe.*;

alias PlayControlsBackTag = 0;
alias PlayControlsPlayTag = 1;
alias PlayControlsForwardTag = 2;

alias PlaylistControlsAddTag = 0;
alias PlaylistControlsRandomTag = 1;
alias PlaylistControlsRepeatTag = 2;

overload selector(static #"performPlayControl:") = Void, NSSegmentedControl;
overload selector(static #"performBack:") = Void, Id;
overload selector(static #"performPlay:") = Void, Id;
overload selector(static #"performForward:") = Void, Id;
overload selector(static #"performVolumeUpdate:") = Void, Id;
overload selector(static #"performSearch:") = Void, Id;
overload selector(static #"performPlaylistControl:") = Void, NSSegmentedControl;
overload selector(static #"performAddPlaylist:") = Void, Id;
overload selector(static #"performAddPlaylistFromSelection:") = Void, Id;
overload selector(static #"performAddPlaylistFolder:") = Void, Id;
overload selector(static #"performToggleShuffle:") = Void, Id;
overload selector(static #"performToggleRepeat:") = Void, Id;
overload selector(static #"performRepeatOff:") = Void, Id;
overload selector(static #"performRepeatAll:") = Void, Id;
overload selector(static #"performRepeatOne:") = Void, Id;
overload selector(static #"performTogglePlaylistColumn:") = Void, NSMenuItem;
overload selector(static #"performImportItunesLibrary:") = Void, Id;
overload selector(static #"performDoubleClickPlaylist:") = Void, NSTableView;
overload selector(static #"performDoubleClickTrack:") = Void, NSTableView;
overload selector(static #"performOpenLibraryWindow:") = Void, Id;
overload selector(static #"performScanTrack:") = Void, NSSlider;
overload selector(static #"performAddToLibrary:") = Void, Id;
overload selector(static #"player") = Player;
overload selector(static #"library") = Pointer[Library];
overload selector(static #"_importSheetDidEnd:returnCode:contextInfo:")
    = Void, NSWindow, NSInteger, RawPointer;
overload selector(static #"_importFilesSheetDidEnd:returnCode:contextInfo:")
    = Void, NSOpenPanel, Int, RawPointer;
overload selector(static #"handlePlayerStateDidChangeNotification:")
    = Void, NSNotification;
overload selector(static #"handlePlayerUpdateTimeNotification:")
    = Void, NSNotification;
overload selector(static #"handleSelectPlaylist:") = Void, NSNotification;
overload selector(static #"handleSelectTrack:") = Void, NSNotification;
overload selector(static #"handlePlaylistDidChange:") = Void, NSNotification;
overload selector(static #"handleImportError:") = Void, NSNotification;
overload selector(static #"handleSleep:") = Void, NSNotification;
overload selector(static #"importErrorAlertDidEnd:returnCode:contextInfo:") = Void, NSAlert, NSInteger, RawPointer;
overload selector(static #"mainController") = MainController;

var columnMenuItemOrder = array(
    "name",
    "album_name",
    "album_artist_name",
    "track_artist_name",
    "genre_name",
    "composer_name",
    "grouping_name",
    "side_number",
    "track_number",
    "duration_time",
    "year",
    "comments",
    "play_count",
    "added_date",
    "modified_date",
    "played_date",
);

setStatusField(self, ..contents) {
    self^.statusField.setStringValue(str(..contents));
}

playTrackViewId(self: MainController, trackViewId: NSInteger) {
    self^.player.playLibrary_filter_trackViewId(
        &self^.library,
        self^.playlistDataSource.libraryFilter()^,
        trackViewId
    );
}

boolState(x: Bool) = if (x) NSInteger(NSOnState) else NSInteger(NSOffState);

updateShuffleControl(self: MainController, shuffle: Bool) {
    self^.playlistControls.setLabel_forSegment(
        if (shuffle) "X" else "x",
        NSInteger(PlaylistControlsRandomTag)
    );
    self^.shuffleMenuItem.setState(boolState(shuffle));
}

updateRepeatControl(self: MainController, repeatMode: RepeatMode) {
    var label = StringConstant();
    switch (repeatMode)
    case (NoRepeat) {
        label = "r";
    } case (RepeatAll) {
        label = "R";
    } case (RepeatOne) {
        label = "1";
    } 
    self^.playlistControls.setLabel_forSegment(
        label,
        NSInteger(PlaylistControlsRepeatTag)
    );
    self^.noRepeatMenuItem.setState(boolState(repeatMode == NoRepeat));
    self^.repeatAllMenuItem.setState(boolState(repeatMode == RepeatAll));
    self^.repeatOneMenuItem.setState(boolState(repeatMode == RepeatOne));
}

updatePlayControls(self: MainController) {
    var playControls = self^.playControls;
    matchByType(self^.player.playerState()^,
        StoppedState,  stopped => {
            self^.playButtonMode = PlayButton;
            playControls.setLabel_forSegment(
                #">",
                NSInteger(PlayControlsPlayTag)
            );
            playControls.setEnabled_forSegment(
                false,
                NSInteger(PlayControlsBackTag)
            );
            playControls.setEnabled_forSegment(
                false,
                NSInteger(PlayControlsForwardTag)
            );
            self^.playMenuItem.setTitle("Play");
            self^.playDockMenuItem.setTitle("Play");
        },
        PlaylistState, playlistState => {
            playControls.setEnabled_forSegment(
                true,
                NSInteger(PlayControlsBackTag)
            );
            playControls.setEnabled_forSegment(
                true,
                NSInteger(PlayControlsForwardTag)
            );

            switch (playlistState.mode)
            case (Playing) {
                if (playlistState.libraryFilter == self^.playlistDataSource.libraryFilter()^) {
                    self^.playButtonMode = PauseButton;
                    playControls.setLabel_forSegment(
                        #"||",
                        NSInteger(PlayControlsPlayTag)
                    );
                    self^.playMenuItem.setTitle("Pause");
                    self^.playDockMenuItem.setTitle("Pause");
                } else {
                    self^.playButtonMode = StopButton;
                    playControls.setLabel_forSegment(
                        #"X",
                        NSInteger(PlayControlsPlayTag)
                    );
                    self^.playMenuItem.setTitle("Stop");
                    self^.playDockMenuItem.setTitle("Stop");
                }
            } case (Paused) {
                if (playlistState.libraryFilter == self^.playlistDataSource.libraryFilter()^)
                    self^.playButtonMode = ResumeButton;
                else
                    self^.playButtonMode = PlayButton;

                playControls.setLabel_forSegment(
                    #">",
                    NSInteger(PlayControlsPlayTag)
                );
                self^.playMenuItem.setTitle("Resume");
                self^.playDockMenuItem.setTitle("Resume");
            } 
            
        }
    );
    self^.playlistView.reloadData();

    updatePlayIndicator(self);
    updatePlayInfo(self);
}

updatePlayIndicator(self: MainController) {
    matchByType(self^.player.playerState()^,
        StoppedState,  stopped => {
            self^.playlistDataSource^.playingTrackViewId = nothing(NSInteger);
        },
        PlaylistState, playlistState => {
            if (playlistState.libraryFilter == self^.playlistDataSource.libraryFilter()^) {
                self^.playlistDataSource^.playingTrackViewId
                    = Maybe(self^.player.currentTrack()^.track_view_id);
                self^.playlistDataSource^.playingMode = playlistState.mode;
            } else {
                self^.playlistDataSource^.playingTrackViewId = nothing(NSInteger);
            }
        },
    );
}

updatePlayInfo(self: MainController) {
    var piView = self^.playInfoView;
    var track = self^.player.currentTrack();
    if (null?(track)) {
        piView.setTrackName(nil());
        piView.setAlbumName(nil());
        piView.setArtistName(nil());
        piView.setDurationTime(0.0);
    } else {
        piView.setTrackName(track^.name);
        piView.setAlbumName(maybe(track^.album_name, name => Id(name), () => nil()));
        piView.setArtistName(maybe(track^.track_artist_name, name => Id(name), () => nil()));
        piView.setDurationTime(track^.duration_time);
    }
    updatePlayTime(self);
}

updatePlayTime(self: MainController) {
    self^.playInfoView.setCurrentTime(self^.player.currentTrackTime());
    self^.playInfoView.updateInterface();
}

updateStatus(self: MainController) {
    var playlistStatus = self^.playlistDataSource.playlistStatus();
    if (playlistStatus.size > 0) {
        var numberFormatter = NSNumberFormatter.alloc().init().autorelease();
        numberFormatter.setNumberStyle(NSUInteger(kCFNumberFormatterDecimalStyle));
        var tracksString = if (playlistStatus.size == 1) NSString(#"track") else NSString(#"tracks");
        self^.statusField.setStringValue(NSString.stringWithFormat(#"%@ %@, %@ total time",
            numberFormatter.stringFromNumber(playlistStatus.size), tracksString,
            timeFormat(playlistStatus.duration)
        ));
    } else {
        self^.statusField.setStringValue(#"");
    }
}

updatePlaylistLibraryFilter(self) {
    var libView = self^.libraryView;
    var plView = self^.playlistView;
    var item = libView.itemAtRow(libView.selectedRow());

    var newFilter = self^.libraryDataSource.selectedFilterForLibraryView_playlistView(libView, plView);
    self^.playlistDataSource.setLibraryFilter_tableView(newFilter, plView);

    NSUserDefaults.standardUserDefaults().setObject_forKey(
        libraryFilterPlist(newFilter^),
        #"Playlist View",
    );
}

enum PlayButtonMode (PlayButton, ResumeButton, StopButton, PauseButton);

playButton(self: MainController) {
    switch (self^.playButtonMode)
    case (PlayButton) {
        var selection = self^.playlistView.selectedRowIndexes().firstIndex();
        if (selection == NSNotFound)
            selection = 0;
        // XXX inappropriate touch
        if (selection < size(self^.playlistDataSource^.tracks)) {
            var trackViewId = self^.playlistDataSource^.tracks[selection].track_view_id;
            playTrackViewId(self, trackViewId);
        }
    } case (ResumeButton) {
        self^.player.resume();
    } case (PauseButton) {
        self^.player.pause();
    } case (StopButton) {
        self^.player.stop();
    }
}

private newPlaylist(self: MainController) {
    var libView = self^.libraryView;
    var selItem = libView.itemAtRow(libView.selectedRow());
    var parentItem = if (itemIsFolder?(selItem))
        selItem
    else
        libView.parentForItem(selItem);

    var newItem = self^.libraryDataSource.insertPlaylistWithName_parentItem(
        #"New Playlist",
        parentItem
    );
    libView.reloadData();

    return parentItem, newItem;
}

private editNewPlaylistItem(self: MainController, parentItem, newItem) {
    var libView = self^.libraryView;

    libView.expandItem(parentItem);
    var playlistRow = libView.rowForItem(newItem);
    libView.selectRowIndexes_byExtendingSelection(
        NSIndexSet.indexSetWithIndex(NSUInteger(playlistRow)),
        false
    );
    libView.editColumn_row_withEvent_select(
        NSInteger(0),
        NSInteger(playlistRow),
        nil(NSEvent),
        true
    );
}

defaultColumnsDict() = makeNSDictionary(
    "name", true,
    "duration_time", true,
    "album_name", true,
    "track_artist_name", true,
    "album_name", true,
    "genre_name", true,
    /* "rating", true, */
);

private var theController = nil(MainController);

releaseDatabaseLocks() { theController.releaseDatabaseLocks(); }

record MainController = newClass(#VinylMainController, NSObject,
    InstanceVars(
        ..IBOutlets(
            mainWindow: NSWindow,
            appDelegate: AppDelegate,
            // content
            libraryView: NSOutlineView,
            playlistView: NSTableView,
            // toolbar
            playControls: NSSegmentedControl,
            volumeControl: NSControl,
            playInfoView: PlayInfoView,
            searchField: NSTextField,
            // status bar controls
            playlistControls: NSSegmentedControl,
            statusField: NSTextField,
            // menu items
            playMenuItem: NSMenuItem,
            playDockMenuItem: NSMenuItem,
            shuffleMenuItem: NSMenuItem,
            noRepeatMenuItem: NSMenuItem,
            repeatAllMenuItem: NSMenuItem,
            repeatOneMenuItem: NSMenuItem,
            firstViewColumnMenuItem: NSMenuItem,
        ),
        libraryDataSource: Retained[LibraryDataSource],
        playlistDataSource: Retained[PlaylistDataSource],
        library: Library,
        player: Retained[Player],
        playButtonMode: PlayButtonMode,
        columns: Retained[NSMutableDictionary],
    ),
    ClassMethods(
        [#"mainController", class => theController],
    ),
    InstanceMethods(
        DeallocInstanceMethod(),

        ..IBActions(
            [#"performPlayControl:", (self, sender) => {
                switch (sender.selectedSegment())
                case (PlayControlsBackTag) {
                    self.performBack(sender);
                } case (PlayControlsPlayTag) {
                    self.performPlay(sender);
                } case (PlayControlsForwardTag) {
                    self.performForward(sender);
                } 
            }],
            [#"performPlay:", (self, sender) => {
                playButton(self);
            }],
            [#"performBack:", (self, sender) => {
                self^.player.previousTrack();
            }],
            [#"performForward:", (self, sender) => {
                self^.player.nextTrack();
            }],
            [#"performDoubleClickPlaylist:", (self, sender) => {
            }],
            [#"performDoubleClickTrack:", (self, sender) => {
                var rowNumber = sender.clickedRow();
                if (rowNumber < 0 or rowNumber >= size(self^.playlistDataSource^.tracks))
                    return;
                // XXX inappropriate touch
                var trackViewId = self^.playlistDataSource^.tracks[rowNumber].track_view_id;
                playTrackViewId(self, trackViewId);
            }],
            [#"performVolumeUpdate:", (self, sender) => {
                var volume = sender.doubleValue();
                NSUserDefaults.standardUserDefaults().setDouble_forKey(volume, "Volume");
                self^.player.setVolume(Float(volume));
            }],
            [#"performSearch:", (self, sender) => {
                self^.playlistDataSource.setSearchString(sender.stringValue());
                self^.playlistView.reloadData();
                updateStatus(self);
            }],
            [#"performPlaylistControl:", (self, sender) => {
                switch (sender.selectedSegment())
                case (PlaylistControlsAddTag) {
                    self.performAddPlaylist(sender);
                } case (PlaylistControlsRandomTag) {
                    self.performToggleShuffle(sender);
                } case (PlaylistControlsRepeatTag) {
                    self.performToggleRepeat(sender);
                } 
            }],
            [#"performAddPlaylist:", (self, sender) => {
                var parentItem, newItem = ..newPlaylist(self);
                editNewPlaylistItem(self, parentItem, newItem);
            }],
            [#"performAddPlaylistFromSelection:", (self, sender) => {
                var parentItem, newItem = ..newPlaylist(self);
                var selectedTracks = self^.playlistView.selectedRowIndexes();
                var selectedTrackRows = indexSetIndices(selectedTracks);

                // XXX inappropriate touch
                var selectedTrackIds = mapped(
                    row => self^.playlistDataSource^.tracks[row].track_id,
                    selectedTrackRows
                );

                insertLibraryPlaylistTracks(self^.library, NSInteger(newItem["id"]), selectedTrackIds);
                editNewPlaylistItem(self, parentItem, newItem);
            }],
            [#"performAddPlaylistFolder:", (self, sender) => {
                var libView = self^.libraryView;

                var newItem = self^.libraryDataSource.insertPlaylistFolderWithName(#"New Folder");

                libView.reloadData();

                editNewPlaylistItem(self, nil(), newItem);
            }],
            [#"performToggleShuffle:", (self, sender) => {
                var shuffle = not self^.player.shuffle();
                updateShuffleControl(self, shuffle);
                NSUserDefaults.standardUserDefaults().setBool_forKey(shuffle, #"Shuffle");
                self^.player.setShuffle(shuffle);
            }],
            [#"performToggleRepeat:", (self, sender) => {
                var repeat = self^.player.repeatMode();
                switch (repeat)
                case (NoRepeat) {
                    repeat = RepeatAll;
                } case (RepeatAll) {
                    repeat = RepeatOne;
                } case (RepeatOne) {
                    repeat = NoRepeat;
                } 
                updateRepeatControl(self, repeat);
                NSUserDefaults.standardUserDefaults().setInteger_forKey(
                    NSInteger(repeat),
                    #"Repeat"
                );
                self^.player.setRepeatMode(repeat);
            }],
            [#"performRepeatOff:", (self, sender) => {
                updateRepeatControl(self, NoRepeat);
                self^.player.setRepeatMode(NoRepeat);
            }],
            [#"performRepeatAll:", (self, sender) => {
                updateRepeatControl(self, RepeatAll);
                self^.player.setRepeatMode(RepeatAll);
            }],
            [#"performRepeatOne:", (self, sender) => {
                updateRepeatControl(self, RepeatOne);
                self^.player.setRepeatMode(RepeatOne);
            }],
            [#"performImportItunesLibrary:", (self, sender) => {
                releaseDatabaseLocks();
                performImportItunesLibrary(self, findItunesLibrary());
            }],
            [#"performOpenLibraryWindow:", (self, sender) => {
                self^.mainWindow.makeKeyAndOrderFront(self);
            }],

            [#"performTogglePlaylistColumn:", (self, sender) => {
                var column = self^.columns[NSNumber(sender.tag())];
                var tableColumn = column[0];
                var columnName = tableColumn.identifier();
                var menuItem = NSMenuItem(column[1]);

                var visible? = menuItem.state() != NSOnState;
                menuItem.setState(boolState(visible?));
                tableColumn.setHidden(not visible?);

                var defaults = NSUserDefaults.standardUserDefaults();
                var columnDefaults = Retained(defaults.dictionaryForKey(#"Columns").mutableCopy());
                if (visible?)
                    columnDefaults.setObject_forKey(true, columnName);
                else
                    columnDefaults.removeObjectForKey(columnName);
                defaults.setObject_forKey(columnDefaults, #"Columns");
            }],

            [#"performScanTrack:", (self, sender) => {
                self^.player.setCurrentTrackTime(sender.doubleValue());
            }],
            [#"performAddToLibrary:", (self, sender) => {
                releaseDatabaseLocks();
                var panel = NSOpenPanel.openPanel();

                panel.setPrompt(#"Add");
                panel.setAllowsMultipleSelection(true);
                panel.setCanChooseDirectories(true);
                
                panel.beginSheetForDirectory_file_types_modalForWindow_modalDelegate_didEndSelector_contextInfo(
                    nil(),
                    nil(),
                    nil(),
                    self^.mainWindow,
                    self,
                    selectorHandle(#"_importFilesSheetDidEnd:returnCode:contextInfo:"),
                    RawPointer(0),
                );
            }],
        ),

        [#"awakeFromNib", self => {
            theController = self;

            libc.srandomdev();

            var defaults = NSUserDefaults.standardUserDefaults();
            defaults.registerDefaults(makeNSDictionary(
                #"Volume", 1.0,
                #"Shuffle", false,
                #"Repeat", Int(NoRepeat),
                #"Columns", defaultColumnsDict(),
                #"Playlist View", makeNSArray(#"Library"),
                #"MediaKeys", MediaKeysNeverRespond,
            ));

            var defaultSortDescriptors = self^.playlistView.sortDescriptors();
            if (defaultSortDescriptors.count() == 0)
                defaultSortDescriptors = makeNSArray(
                    NSSortDescriptor.alloc().initWithKey_ascending(#"name", true).autorelease(),
                );
            
            var defaultLibraryFilter = LibraryFilter(
                defaults.arrayForKey(#"Playlist View"),
                SortedFilter(defaultSortDescriptors)
            );

            self^.library <-- Library();
            updateLibraryFTS(self^.library);

            self^.libraryDataSource
                = Retained(LibraryDataSource.alloc().initWithLibrary(&self^.library));
            self^.libraryView.setDataSource(self^.libraryDataSource);
            self^.libraryView.setDelegate(self^.libraryDataSource);

            self^.libraryView.setTarget(self);
            self^.libraryView.setDoubleAction(selectorHandle(#"performDoubleClickPlaylist:"));
            self^.libraryView.registerForDraggedTypes(makeNSArray(PlaylistIdsPboardType, TrackIdsPboardType));
            self^.libraryDataSource.libraryView_selectFilter(
                self^.libraryView,
                &defaultLibraryFilter
            );

            self^.playlistView.registerForDraggedTypes(makeNSArray(TrackIdsPboardType));

            self^.playlistView.setTarget(self);
            self^.playlistView.setDoubleAction(selectorHandle(#"performDoubleClickTrack:"));

            self^.playlistDataSource
                = Retained(PlaylistDataSource.alloc().initWithLibrary_filter_sortDescriptors(
                    &self^.library,
                    self^.libraryDataSource.selectedFilterForLibraryView_playlistView(
                        self^.libraryView,
                        self^.playlistView
                    ),
                    defaultSortDescriptors,
                ));

            if (variantIs?(self^.playlistDataSource.libraryFilter()^, SortedFilter))
                self^.playlistView.setSortDescriptors(defaultSortDescriptors);
            else
                self^.playlistView.setSortDescriptors(NSArray.array());

            self^.playlistView.setDataSource(self^.playlistDataSource);

            self^.player = Retained(Player.alloc().init());

            var volume = defaults.doubleForKey(#"Volume");
            var shuffle = defaults.boolForKey(#"Shuffle");
            var repeat = RepeatMode(defaults.integerForKey(#"Repeat"));

            self^.volumeControl.setDoubleValue(volume);
            updateShuffleControl(self, shuffle);
            updateRepeatControl(self, repeat);
            updateStatus(self);

            self^.player.setVolume(Float(volume));
            self^.player.setShuffle(shuffle);
            self^.player.setRepeatMode(repeat);

            var notiCenter = NSNotificationCenter.defaultCenter();
            notiCenter.addObserver_selector_name_object(
                self,
                selectorHandle(#"handlePlayerStateDidChangeNotification:"),
                PlayerStateDidChangeNotification,
                self^.player
            );
            notiCenter.addObserver_selector_name_object(
                self,
                selectorHandle(#"handlePlayerUpdateTimeNotification:"),
                PlayerUpdateTimeNotification,
                self^.player
            );
            notiCenter.addObserver_selector_name_object(
                self,
                selectorHandle(#"handleSelectPlaylist:"),
                NSOutlineViewSelectionDidChangeNotification,
                self^.libraryView
            );
            notiCenter.addObserver_selector_name_object(
                self,
                selectorHandle(#"handleSelectTrack:"),
                NSTableViewSelectionDidChangeNotification,
                self^.playlistView
            );
            notiCenter.addObserver_selector_name_object(
                self,
                selectorHandle(#"handlePlaylistDidChange:"),
                PlaylistDidChangeNotification,
                self^.playlistDataSource
            );
            notiCenter.addObserver_selector_name_object(
                self,
                selectorHandle(#"handleImportError:"),
                ImportErrorNotification,
                nil()
            );

            var workspaceNotiCenter = NSWorkspace.sharedWorkspace().notificationCenter();
            workspaceNotiCenter.addObserver_selector_name_object(
                self,
                selectorHandle(#"handleSleep:"),
                NSWorkspaceWillSleepNotification,
                nil()
            );

            self^.columns <-- Retained(NSMutableDictionary.alloc().init());
            var columnMenu = self^.firstViewColumnMenuItem.menu();
            var columnMenuIndex = columnMenu.indexOfItem(self^.firstViewColumnMenuItem);
            var visibleColumns = defaults.dictionaryForKey(#"Columns");

            for (columnName, index in zipped(
                columnMenuItemOrder,
                range(columnMenuIndex, columnMenuIndex + size(columnMenuItemOrder))
            )) {
                var tableColumn = self^.playlistView.tableColumnWithIdentifier(columnName);
                var menuItem = columnMenu.itemAtIndex(NSInteger(index));

                menuItem.setTag(NSInteger(index));
                menuItem.setTarget(self);
                menuItem.setAction(selectorHandle(#"performTogglePlaylistColumn:"));

                self^.columns.setObject_forKey(
                    makeNSArray(tableColumn, menuItem),
                    index
                );
                var visible? = not nil?(visibleColumns.objectForKey(columnName));
                menuItem.setState(boolState(visible?));
                tableColumn.setHidden(not visible?);
            }
            self^.playlistView.tableColumnWithIdentifier(#"playing_p").setHidden(false);
        }],

        [#"library", self => &self^.library],
        ReaderInstanceMethod(#player, Player),

        [#"_importSheetDidEnd:returnCode:contextInfo:", (self, sheet, returnCode, context) => {
            var importController = ImportController(context);
            refreshPlaylistDataSource(weak(self^.playlistDataSource));
            refreshLibraryDataSource(weak(self^.libraryDataSource));
            self^.libraryView.reloadData();
            self^.playlistView.reloadData();
            updateStatus(self);
            sheet.orderOut(self);
            importController.release();
        }],

        [#"_importFilesSheetDidEnd:returnCode:contextInfo:", (self, sheet, returnCode, context) => {
            var filenames = Retained(sheet.filenames().retain());
            sheet.orderOut(self);
            if (returnCode == Int(NSOKButton)) {
                var importController = allocImportController(self);
                if (not nil?(importController))
                    importController.importFiles_modalForWindow_modalDelegate_didEndSelector_contextInfo(
                        filenames,
                        self^.mainWindow,
                        self,
                        selectorHandle(#"_importSheetDidEnd:returnCode:contextInfo:"),
                        RawPointer(importController)
                    );
            }
        }],

        [#"handlePlayerStateDidChangeNotification:", (self, notification) => {
            updatePlayControls(self);
        }],
        [#"handlePlayerUpdateTimeNotification:", (self, notification) => {
            updatePlayTime(self);
        }],
        [#"handleSelectPlaylist:", (self, notification) => {
            // XXX preserve selection for each view

            self^.playlistView.selectRowIndexes_byExtendingSelection(
                NSIndexSet.indexSet(),
                false
            );

            updatePlaylistLibraryFilter(self);
            // XXX preserve search for each view
            self^.searchField.setStringValue(NSString(#""));

            self^.playlistView.reloadData();

            updatePlayControls(self);
            updateStatus(self);
        }],
        [#"handleSelectTrack:", (self, notification) => {
        }],
        [#"handlePlaylistDidChange:", (self, notification) => {
            ifPlaying(self^.player.playerState()^, playlistState => {
                if (playlistState.libraryFilter == self^.playlistDataSource.libraryFilter()^) {
                    var newTrackViewIdNumber = notification.userInfo()[PlaylistNewTrackViewId];
                    if (nil?(newTrackViewIdNumber))
                        self^.player.changeFilter(self^.playlistDataSource.libraryFilter()^);
                    else
                        self^.player.changeFilter_trackViewId(
                            self^.playlistDataSource.libraryFilter()^,
                            NSInteger(newTrackViewIdNumber),
                        );
                }
            });
            updateStatus(self);
        }],
        [#"handleImportError:", (self, notification) => {
            NSAlert.alertWithMessageText_defaultButton_alternateButton_otherButton_informativeTextWithFormat(
                notification.userInfo()[ImportErrorMessageKey],
                #"OK",
                nil(),
                nil(),
                #"%@", notification.userInfo()[ImportErrorDetailKey],
            ).beginSheetModalForWindow_modalDelegate_didEndSelector_contextInfo(
                self^.mainWindow,
                self,
                selectorHandle(#"importErrorAlertDidEnd:returnCode:contextInfo:"),
                RawPointer(0),
            );
        }],
        [#"handleSleep:", (self, notification) => {
            self^.player.pause();
        }],
        [#"importErrorAlertDidEnd:returnCode:contextInfo:", (self, alert, returnCode, context) => {
            alert.window().orderOut(self);
        }],

        [#"splitView:resizeSubviewsWithOldSize:", (self, splitView, oldSize) => {
            var newFrame = viewFrame(splitView);
            var left  = splitView.subviews()[0];
            var right = splitView.subviews()[1];
            var leftFrame  = viewFrame(left);
            var rightFrame = viewFrame(right);
            var dividerThickness = splitView.dividerThickness();
            leftFrame.size.height = newFrame.size.height;
            rightFrame.size.height = newFrame.size.height;

            rightFrame.size.width = newFrame.size.width - leftFrame.size.width - dividerThickness;
            rightFrame.origin.x = leftFrame.size.width + dividerThickness;

            setViewFrame(left,  leftFrame);
            setViewFrame(right, rightFrame);
        }],

        [#"validateMenuItem:", (self, item) => {
            if (inValues?(item.action(), selectorHandle(#"performBack:"), selectorHandle(#"performForward:")))
                return variantIs?(self^.player.playerState()^, PlaylistState);
            else
                return self.respondsToSelector(item.action());
        }],

        [#"releaseDatabaseLocks", self => {
            self^.playlistDataSource.releaseDatabaseLocks();
        }],
    ),
);

viewFrame(view) --> returned: NSRect {
    // XXX use NSInvocation to hack around struct abi bug
    var invocation = NSInvocation.invocationWithMethodSignature(
        view.methodSignatureForSelector(
            selectorHandle(#"frame")
        )
    );
    invocation.setTarget(view);
    invocation.setSelector(selectorHandle(#"frame"));
    invocation.invoke();
    invocation.getReturnValue(RawPointer(&returned));
}

setViewFrame(view, frame: NSRect) {
    var invocation = NSInvocation.invocationWithMethodSignature(
        view.methodSignatureForSelector(
            selectorHandle(#"setFrame:")
        )
    );
    invocation.setTarget(view);
    invocation.setSelector(selectorHandle(#"setFrame:"));
    invocation.setArgument_atIndex(RawPointer(&frame), NSInteger(2));
    invocation.invoke();
}


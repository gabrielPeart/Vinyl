import cocoa.*;
import cocoa.appkit.*;
import Vinyl.library.*;
import Vinyl.controllers.main.*;
import Vinyl.importers.itunes.*;
import Vinyl.importers.files.*;
import Vinyl.importers.*;
import sqlite.*;

overload selector(static #"importItunesLibrary:modalForWindow:modalDelegate:didEndSelector:contextInfo:")
    = Void, NSString, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(static #"importFiles:modalForWindow:modalDelegate:didEndSelector:contextInfo:")
    = Void, NSArray, NSWindow, Id, SelectorHandle, RawPointer;
overload selector(static #"cancel:") = Void, Id;
overload selector(static #"setProgressIndicatorValue:") = Void, NSNumber;
overload selector(static #"_importItunesThread:") = Void, Id;
overload selector(static #"_importFilesThread:") = Void, NSArray;
overload selector(static #"reportImportError:") = Void, NSDictionary;

alias ImportErrorNotification = NSString(#"VinylImportErrorNotification");
alias ImportErrorMessageKey = NSString(#"VinylImportErrorMessage");
alias ImportErrorDetailKey = NSString(#"VinylImportErrorDetail");

importErrorMessage(x) = Id(#"Adding to the Vinyl library failed.");
importErrorDetail(x) = Id(str(x));

overload importErrorDetail(x: ItunesXMLParserError)
    = Id(str(
        "The XML parser encountered an error.\nCode: ", x.code,
        "\nDescription: ", x.message,
        "\nLine number: ", x.line,
        "\nColumn: ", x.column,
    ));
overload importErrorDetail(x: ItunesInvalidLibraryError)
    = Id(#"The iTunes library file appears to be improperly formatted.");
overload importErrorDetail(x: SqliteError)
    = Id(str(
        "There was an error updating the Vinyl library database.\nCode: ", x.code,
        "\nDescription: ", x.message,
    ));

findItunesLibrary() {
    var fm = NSFileManager.defaultManager();
    var itunesLibrary = NSString(#"~/Music/iTunes/iTunes Music Library.xml")
        .stringByExpandingTildeInPath();

    if (fm.isReadableFileAtPath(itunesLibrary))
        return itunesLibrary;
    else
        return nil(NSString);
}

allocImportController(from) {
    var importController = ImportController.alloc().init();

    if (nil?(importController)) {
        NSNotificationCenter.defaultCenter().postNotificationName_object_userInfo(
            ImportErrorNotification,
            from,
            makeNSDictionary(
                ImportErrorMessageKey, #"The importer failed to start.",
                ImportErrorDetailKey, #"Please report this error.",
            ),
        );
        return nil(ImportController);
    } else
        return importController;
}

performImportItunesLibrary(main: MainController, itunesLibrary: NSString) {
    if (nil?(itunesLibrary)) {
        NSNotificationCenter.defaultCenter().postNotificationName_object_userInfo(
            ImportErrorNotification,
            main,
            makeNSDictionary(
                ImportErrorMessageKey, #"An iTunes library file could not be found.",
                ImportErrorDetailKey, #"Check that the \"iTunes Music Library.xml\" file is available in in the \"Music/iTunes\" folder under your home folder.",
            ),
        );
    } else {
        var importController = allocImportController(main);
        if (not nil?(importController))
            importController.importItunesLibrary_modalForWindow_modalDelegate_didEndSelector_contextInfo(
                itunesLibrary,
                main^.mainWindow,
                main,
                selectorHandle(#"_importSheetDidEnd:returnCode:contextInfo:"),
                RawPointer(importController)
            );
    }
}

// NB: must send messages to main thread!
private updateProgressCallback(self, stage, distance, goal) {
    alias READ_STAGE_LENGTH = 80.0;
    alias MERGE_STAGE_LENGTH = 20.0;

    if (stage != self^.stage) {
        var message = StringConstant();
        switch (stage)
        case (ReadItunesLibrary) {
            message = "Reading iTunes library...";
        } case (ReadFileTags) {
            message = "Reading file tags...";
        } case (MergeVinylLibrary) {
            message = "Merging with Vinyl library...";
        } 
        self^.statusField.performSelectorOnMainThread_withObject_waitUntilDone(
            selectorHandle(#"setStringValue:"),
            NSString(message),
            false
        );
        self^.stage = stage;
    }
            
    var progress = 0.0;
    switch (stage)
    case (ReadItunesLibrary, ReadFileTags) {
        progress = READ_STAGE_LENGTH * (Double(distance)/Double(goal));
    } case (MergeVinylLibrary) {
        progress = READ_STAGE_LENGTH + MERGE_STAGE_LENGTH * (Double(distance)/Double(goal));
    } 

    self.performSelectorOnMainThread_withObject_waitUntilDone(
        selectorHandle(#"setProgressIndicatorValue:"),
        progress,
        false,
    );

    return not self^.cancelled;
}

_importer(sel) = (self, filename, window, delegate, selector, context) => {
    NSApp.beginSheet_modalForWindow_modalDelegate_didEndSelector_contextInfo(
        self^.sheet, window, delegate, selector, context
    );

    NSThread.detachNewThreadSelector_toTarget_withObject(
        selectorHandle(sel), self, filename
    );
};

_importerThread(self, body) {
    withAutoreleasePool(() => {
        var library = Library();

        try {
            body(library, (stage, distance, goal) => updateProgressCallback(self, stage, distance, goal));
        } catch (cancel: ImportCancelled) {
            // do nothing
        } catch (ex) {
            NSApp.performSelectorOnMainThread_withObject_waitUntilDone(
                selectorHandle(#"endSheet:"),
                self^.sheet,
                true,
            );
            self.performSelectorOnMainThread_withObject_waitUntilDone(
                selectorHandle(#"reportImportError:"),
                makeNSDictionary(
                    ImportErrorMessageKey, importErrorMessage(*ex),
                    ImportErrorDetailKey,  importErrorDetail(*ex),
                ),
                false,
            );
            return;
        }

        NSApp.performSelectorOnMainThread_withObject_waitUntilDone(
            selectorHandle(#"endSheet:"),
            self^.sheet,
            false
        );
    });
}

record ImportController = newClass(#VinylImportController, NSObject,
    InstanceVars(
        ..IBOutlets(
            sheet: Retained[NSPanel],
            statusField: NSTextField,
            progressIndicator: NSProgressIndicator,
        ),
        stage: ImportStage,
        cancelled: Bool,
    ),
    ClassMethods(),
    InstanceMethods(
        [#"init", (self) => initObjectWith(self, #"init", self => {
            self^.stage = MergeVinylLibrary;
            self^.cancelled = false;

            if (not NSBundle.loadNibNamed_owner(#"ImportController", self)) {
                self.release();
                return nil(ImportController);
            } else
                return self;
        })],

        ..IBActions(
            [#"cancel:", (self, sender) => {
                self^.cancelled = true;
            }],
        ),

        [#"importItunesLibrary:modalForWindow:modalDelegate:didEndSelector:contextInfo:",
            _importer(#"_importItunesThread:")
        ],

        [#"importFiles:modalForWindow:modalDelegate:didEndSelector:contextInfo:",
            _importer(#"_importFilesThread:")
        ],

        [#"_importItunesThread:", (self, filename) => {
            _importerThread(self, (library, callback) => {
                importItunes(library, String(filename), callback);
            });
        }],

        [#"_importFilesThread:", (self, filenames) => {
            _importerThread(self, (library, callback) => {
                importFiles(library, mapped(String, filenames), callback);
            });
        }],

        [#"setProgressIndicatorValue:", (self, value) => {
            self^.progressIndicator.setDoubleValue(value.doubleValue());
        }],
        [#"reportImportError:", (self, info) => {
            NSNotificationCenter.defaultCenter().postNotificationName_object_userInfo(
                ImportErrorNotification, self, info
            );
        }],

        DeallocInstanceMethod(),
    ),
);

import cocoa.*;
import sqlite.*;
import maybe.*;

alias LIBRARY_DB_FILE = "Vinyl Library.sqlite";

supportDir() {
    var applicationSupportDirs = NSSearchPathForDirectoriesInDomains(
        NSUInteger(NSApplicationSupportDirectory),
        NSUInteger(NSUserDomainMask),
        true
    );
    var applicationSupportDir = NSString(applicationSupportDirs[0]);

    return applicationSupportDir.stringByAppendingPathComponent("Durian Software/Vinyl");
}

libraryFile(dir) = dir.stringByAppendingPathComponent(LIBRARY_DB_FILE);

record Library (db: SqliteDB);

createLibraryDatabase(db: SqliteDB) {
    withTransaction(db, () -> {
        runStatement(db, "create table if not exists artists (
            artist_id integer primary key,
            display_name text not null unique,
            sort_name text not null collate nocase
        )");
        runStatement(db, "create table if not exists albums (
            album_id integer primary key,
            display_name text not null,
            sort_name text not null collate nocase,
            album_artist_id integer references artists (artist_id),
            sides_count integer,
            compilation_p integer not null default 0,
            unique (display_name, album_artist_id, compilation_p)
        )");
        runStatement(db, "create table if not exists album_sides (
            album_id integer not null references albums (album_id),
            side_number integer not null,
            tracks_count integer,
            primary key (album_id, side_number)
        )");
        runStatement(db, "create table if not exists genres (
            genre_id integer primary key,
            name text not null unique collate nocase
        )");
        runStatement(db, "create table if not exists composers (
            composer_id integer primary key,
            display_name text not null unique,
            sort_name text not null collate nocase
        )");
        runStatement(db, "create table if not exists groupings (
            grouping_id integer primary key,
            name text not null unique collate nocase
        )");
        runStatement(db, "create table if not exists tracks (
            track_id integer primary key,
            filename text not null unique,
            display_name text not null,
            sort_name text not null collate nocase,
            album_id integer references albums (album_id),
            track_artist_id integer references artist (artist_id),
            genre_id integer references genres (genre_id),
            composer_id integer references composers (composer_id),
            grouping_id integer references groupings (grouping_id),
            side_number integer,
            track_number integer,
            duration_time real not null,
            year text,
            comments text collate nocase
        )");
        
        runStatement(db, "create table if not exists playlist_folders (
            playlist_folder_id integer primary key,
            name text not null,
            position integer unique not null
        )");
        runStatement(db, "create table if not exists playlists (
            playlist_id integer primary key,
            name text not null,
            playlist_folder_id integer references playlist_folders (playlist_folder_id),
            position integer not null,
            unique (playlist_folder_id, position)
        )");
        runStatement(db, "create table if not exists playlist_tracks (
            playlist_id integer references playlists (playlist_id) not null,
            track_id integer references tracks (track_id) not null,
            position integer not null,
            primary key (playlist_id, track_id, position),
            unique (playlist_id, position)
        )");
        
        runStatement(db, "create table if not exists album_options (
            album_id integer primary key references albums (album_id),
            rating integer
        )");
        runStatement(db, "create table if not exists track_options (
            track_id integer primary key references tracks (track_id),
            enabled_p integer not null default 0,
            rating integer,
            start_time real,
            end_time real,
            play_count integer not null default 0,
            added_date integer,
            modified_date integer,
            played_date integer
        )");
        runStatement(db, "create index if not exists albums_sort_name on albums (sort_name)");
        runStatement(db, "create index if not exists albums_album_artist_id on albums (album_artist_id)");
        runStatement(db, "create index if not exists albums_compilation_p on albums (compilation_p)");
        runStatement(db, "create index if not exists artists_sort_name on artists (sort_name)");
        runStatement(db, "create index if not exists genres_name on genres (name)");
        runStatement(db, "create index if not exists composers_sort_name on composers (sort_name)");
        runStatement(db, "create index if not exists groupings_name on groupings (name)");
        runStatement(db, "create index if not exists tracks_sort_name on tracks (sort_name)");
        runStatement(db, "create index if not exists tracks_album_id on tracks (album_id)");
        runStatement(db, "create index if not exists tracks_track_artist_id on tracks (track_artist_id)");
        runStatement(db, "create index if not exists tracks_genre_id on tracks (genre_id)");
        runStatement(db, "create index if not exists tracks_composer_id on tracks (composer_id)");
        runStatement(db, "create index if not exists tracks_grouping_id on tracks (grouping_id)");
        runStatement(db, "create index if not exists tracks_duration_time on tracks (duration_time)");
        runStatement(db, "create index if not exists tracks_side_track_number on tracks (side_number, track_number)");
        runStatement(db, "create index if not exists tracks_year on tracks (year)");
        runStatement(db, "create index if not exists tracks_comments on tracks (comments)");
        runStatement(db, "create index if not exists track_options_enabled_p on track_options (enabled_p)");
        runStatement(db, "create index if not exists track_options_play_count on track_options (play_count)");
        runStatement(db, "create index if not exists track_options_added_date on track_options (added_date)");
        runStatement(db, "create index if not exists track_options_modified_date on track_options (modified_date)");
        runStatement(db, "create index if not exists track_options_played_date on track_options (played_date)");

        if (not statementValue?(db, "select name from sqlite_master where name = 'tracks_fts'"))
            runStatement(db, "create virtual table tracks_fts using fts3(
                filename, -- filename
                name, -- track_name
                album, -- album_name
                artist, -- track_artist_name
                album_artist, -- album_artist_name
                genre, -- genre_name
                composer, -- composer_name
                grouping, -- grouping_name
                comments -- comments
            )");
    });
}

createLibrary(file) {
    var db = SqliteDB(file);
    createLibraryDatabase(db);
    return Library(move(db));
}

updateLibraryFTS(library: Library) {
    runStatement(library.db, "delete from tracks_fts");
    runStatement(library.db, "insert into tracks_fts (
            docid, filename, name, album, album_artist, artist,
            genre, composer, grouping, comments
        ) select
            tracks.track_id as docid,
            tracks.filename as filename,
            tracks.display_name as name,
            albums.display_name as album,
            album_artists.display_name as album_artist,
            coalesce(track_artists.display_name, album_artists.display_name) as artist,
            genres.name as genre,
            composers.display_name as composer,
            groupings.name as grouping,
            tracks.comments as comments
        from
            tracks
            left join albums
                on tracks.album_id = albums.album_id
            left join artists as album_artists
                on albums.album_artist_id = album_artists.artist_id
            left join artists as track_artists
                on tracks.track_artist_id = track_artists.artist_id
            left join genres
                on tracks.genre_id = genres.genre_id
            left join composers
                on tracks.composer_id = composers.composer_id
            left join groupings
                on tracks.grouping_id = groupings.grouping_id
    ");
}

overload Library() {
    var dir = supportDir();
    var file = libraryFile(dir);
    var fm = Retained(NSFileManager.alloc().init());
    if (fm.fileExistsAtPath(file)) {
        return Library(SqliteDB(String(file)));
    } else {
        fm.createDirectoryAtPath_withIntermediateDirectories_attributes_error(
            dir, true, nil(NSDictionary), null(NSError)
        );
        return createLibrary(String(file));
    }
}

// XXX include data source update here 
updateLibraryFolderName(library: Library, folderId, name) {
    runStatement(library.db, "update playlist_folders set name = ? where playlist_folder_id = ?",
        name, folderId
    );
}

updateLibraryPlaylistName(library: Library, playlistId, name) {
    runStatement(library.db, "update playlists set name = ? where playlist_id = ?",
        name, playlistId
    );
}

insertLibraryPlaylist(library: Library, name, playlistFolderId) {
    runStatement(library.db,
        "insert into playlists (name, playlist_folder_id, position)
            select
                ?1 as name,
                ?2 as playlist_folder_id,
                coalesce(max(position), -1) + 1 as position
            from
                playlists
            where
                playlist_folder_id is ?2
        ", name, playlistFolderId
    );
    return NSInteger(lastInsertedRowId(library.db));
}

insertLibraryPlaylistFolder(library: Library, name) {
    runStatement(library.db,
        "insert into playlist_folders (name, position)
            select
                ?1 as name,
                coalesce(max(position), -1) + 1 as position
            from
                playlist_folders
        ", name
    );
    return NSInteger(lastInsertedRowId(library.db));
}

moveLibraryPlaylist(library: Library, playlistId, parentFolderId) {
    withTransaction(library.db, () -> {
        var oldFolderPositionStmt = SqliteStatement(
            library.db,
            "select playlist_folder_id, position from playlists where playlist_id = ?",
            playlistId
        );
        var iter = iterator(oldFolderPositionStmt);
        var oldParentFolderId, oldPosition = Maybe(NSInteger(0)), NSInteger(0);
        if (hasNext?(iter)) {
            next(iter);
            oldParentFolderId, oldPosition = ..rowValues(iter, Maybe[NSInteger], NSInteger);
        } else {
            return;
        }
        runStatement(library.db,
            "update playlists set
                playlist_folder_id = ?1,
                position = (select
                        coalesce(max(position), -1) + 1 as position
                    from
                        playlists
                    where
                        playlist_folder_id is ?1
                )
            where
                playlist_id = ?2
            ", parentFolderId, playlistId
        );
        runStatement(library.db,
            "update playlists set
                position = position - 1
            where
                playlist_folder_id is ?
                and position >= ?
            ", oldParentFolderId, oldPosition
        );
    });
}

private _insertLibraryPlaylistTracks(library, playlistId, trackIds) {
    for (trackId in trackIds)
        runStatement(library.db,
            "insert into playlist_tracks (playlist_id, track_id, position)
                select
                    ?1 as playlist_id,
                    ?2 as track_id,
                    coalesce(max(position), -1) + 1 as position
                from
                    playlist_tracks
                where
                    playlist_id = ?1
            ", playlistId, trackId
        );
}

insertLibraryPlaylistTracks(library: Library, playlistId, trackIds) {
    withTransaction(library.db, () -> {
        _insertLibraryPlaylistTracks(library, playlistId, trackIds);
    });
}

moveLibraryPlaylistTracks(library: Library, playlistId, trackPositions, position) {
    return withTransaction(library.db, () -> {
        var trackPositionSetSQL = "(" + join(", ", mapped(str, trackPositions)) + ")";

        runStatement(library.db,
            "create temporary table new_playlist_track_positions as select
                track_id
            from
                playlist_tracks
            where
                playlist_id = ?
                and position < ?
                and position not in " + trackPositionSetSQL + "
            order by
                position
            ", playlistId, position
        );
        var newPosition = statementValue(NSInteger, library.db, "select count(1) from new_playlist_track_positions");

        runStatement(library.db,
            "insert into new_playlist_track_positions (track_id) select
                track_id
            from
                playlist_tracks
            where
                playlist_id = ?
                and position in " + trackPositionSetSQL
            , playlistId,
        );
        
        runStatement(library.db,
            "insert into new_playlist_track_positions (track_id) select
                track_id
            from
                playlist_tracks
            where
                playlist_id = ?
                and position >= ?
                and position not in " + trackPositionSetSQL + "
            order by
                position
            ", playlistId, position
        );

        runStatement(library.db,
            "delete from playlist_tracks where playlist_id = ?",
            playlistId
        );
        runStatement(library.db,
            "insert into playlist_tracks (playlist_id, track_id, position) select
                ? as playlist_id,
                track_id,
                rowid - 1 as position
            from
                new_playlist_track_positions
            ", playlistId
        );
        runStatement(library.db, "drop table new_playlist_track_positions");
        return newPosition;
    });
}

deleteLibraryFolder(library: Library, folderId) {
    withTransaction(library.db, () -> {
        runStatement(library.db,
            "delete from playlist_tracks where playlist_id in (
                select playlist_id from playlists where playlist_folder_id = ?
            )",
            folderId
        );
        runStatement(library.db,
            "delete from playlists where playlist_folder_id = ?",
            folderId
        );
        runStatement(library.db,
            "delete from playlist_folders where playlist_folder_id = ?",
            folderId
        );
    });
}

deleteLibraryPlaylist(library: Library, playlistId) {
    withTransaction(library.db, () -> {
        runStatement(library.db,
            "delete from playlist_tracks where playlist_id = ?",
            playlistId
        );
        runStatement(library.db,
            "delete from playlists where playlist_id = ?",
            playlistId
        );
    });
}

deleteLibraryPlaylistPositions(library: Library, playlistId, positions) {
    withTransaction(library.db, () -> {
        for (position in positions)
            runStatement(library.db,
                "delete from playlist_tracks where playlist_id = ? and position = ?",
                playlistId, position
            );
        runStatement(library.db,
            "create temporary table new_playlist_track_positions as select
                track_id
            from
                playlist_tracks
            where
                playlist_id = ?
            order by
                position
            ", playlistId
        );
        runStatement(library.db, "delete from playlist_tracks where playlist_id = ?", playlistId);
        runStatement(library.db,
            "insert into playlist_tracks (playlist_id, track_id, position) select
                ? as playlist_id,
                track_id,
                rowid - 1 as position
            from
                new_playlist_track_positions
            ", playlistId
        );
        runStatement(library.db, "drop table new_playlist_track_positions");
    });
}

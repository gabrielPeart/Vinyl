import Vinyl.library.*;
import Vinyl.library.datasources.*;
import Vinyl.importers.*;
import expat.*;
import sqlite.*;
import io.files.raw.*;
import maybe.*;
import cocoa.*;
import destructors.*;

record ItunesXMLParserError (code: Int, message: String, line: SizeT, column: SizeT);
instance Exception (ItunesXMLParserError);

record ItunesInvalidLibraryError ();
instance Exception (ItunesInvalidLibraryError);

parseXMLFrom(parser: XML_Parser, stream, size, progressCallback) {
    alias BUFFER_SIZE = 16384;
    var readBuffer = XML_GetBuffer(parser, BUFFER_SIZE);
    var readSize = read(stream, readBuffer, BUFFER_SIZE);
    var totalRead = SizeT(0);

    while (readSize > 0) {
        if (XML_ParseBuffer(parser, Int(readSize), Int(XML_FALSE)) == 0) {
            var code = XML_GetErrorCode(parser);
            throw ItunesXMLParserError(
                code,
                String(CStringRef(XML_ErrorString(code))),
                XML_GetCurrentLineNumber(parser),
                XML_GetCurrentColumnNumber(parser),
            );
        }
        totalRead += readSize;
        if (not progressCallback(ReadItunesLibrary, totalRead, size))
            throw ImportCancelled();
        readBuffer = XML_GetBuffer(parser, BUFFER_SIZE);
        readSize = read(stream, readBuffer, BUFFER_SIZE);
    }
    XML_ParseBuffer(parser, Int(0), Int(XML_TRUE));
}

filenameFromURL(urlString)
    = String(NSURL.URLWithString(urlString).path());

record ItunesPlaylist (
    playlistId: Int,
    persistentId: String,
    parentPersistentId: Maybe[String],
    name: String,
    folder?: Bool,
    ignored?: Bool,
    trackCount: SizeT,
);

overload ItunesPlaylist() = ItunesPlaylist(
    -1,
    String(),
    Maybe[String](),
    String(),
    false,
    false,
    SizeT(0),
);

variant ItunesItem
    (Nothing,
    PlaylistTrack,
    ItunesPlaylist); // XXX Playlist, PlaylistFolder

record ItunesParseState (
    library: Pointer[Library],
    trackInsertStmt: SqliteStatement,
    playlistInsertStmt: SqliteStatement,
    playlistTrackInsertStmt: SqliteStatement,
    keyPath: Vector[String],
    tagPath: Vector[String],
    tagContents: String,
    item: ItunesItem,
    itemDepth: SizeT,
    playlistCount: Int,
    exception: Maybe[Exception],
);

itunesAddToValue(item: Nothing, state: ItunesParseState, type: String, value: String) {}

itunesFinishValue(item: Nothing, state: ItunesParseState) { }

overload itunesAddToValue(item: PlaylistTrack, state: ItunesParseState, type: String, value: String) {
    assert(size(state.keyPath) == 3);
    assert(state.keyPath[0] == "Tracks");
    forward key = state.keyPath[2];

    switch (key)
    case ("Track ID") {
        item.track_id = Int(value);
    } case ("Name") {
        item.name = value;
    } case ("Artist") {
        item.track_artist_name = Maybe(value);
        if (nothing?(item.album_artist_name))
            item.album_artist_name = Maybe(value);
    } case ("Composer") {
        item.composer_name = Maybe(value);
    } case ("Grouping") {
        item.grouping_name = Maybe(value);
    } case ("Album") {
        item.album_name = Maybe(value);
    } case ("Album Artist") {
        item.album_artist_name = Maybe(value);
    } case ("Genre") {
        item.genre_name = Maybe(value);
    } case ("Total Time") {
        item.duration_time = Double(value)/1000.0;
    } case ("Track Number") {
        item.track_number = Maybe(Int(value));
    } case ("Track Count") {
        item.tracks_count = Maybe(Int(value));
    } case ("Disc Number") {
        item.side_number = Maybe(Int(value));
    } case ("Disc Count") {
        item.sides_count = Maybe(Int(value));
    } case ("Year") {
        item.year = Maybe(value);
    // XXX parse date
    // case "Date Modified":
    // case "Date Added":
    // case "Play Date UTC":
    } case ("Play Count") {
        item.play_count = Maybe(Int(value));
    } case ("Comments") {
        item.comments = Maybe(value);
    } case ("Compilation") {
        item.album_compilation_p = value != "false";
    // case "Rating":
    //    item.rating = Int(value)/20;
    //    break;
    // case "Album Rating":
    //    item.album_rating = Int(value)/20;
    //    break;
    // XXX parse url
    } case ("Location") {
        item.filename = filenameFromURL(value);
    } case ("Sort Name") {
        item.sort_name = Maybe(value);
    } case ("Sort Album") {
        item.album_sort_name = Maybe(value);
    } case ("Sort Artist") {
        item.track_artist_sort_name = Maybe(value);
        if (nothing?(item.album_artist_sort_name))
            item.album_artist_sort_name = Maybe(value);
    } case ("Sort Album Artist") {
        item.album_artist_sort_name = Maybe(value);
    } case ("Sort Composer") {
        item.composer_sort_name = Maybe(value);
    } else {
        break;
    }
}

overload itunesFinishValue(item: PlaylistTrack, state: ItunesParseState) {
    bindStatementRecord(state.trackInsertStmt, item);
    runStatement(state.trackInsertStmt);
}

overload itunesAddToValue(item: ItunesPlaylist, state: ItunesParseState, type: String, value: String) {
    var keyDepth = size(state.keyPath);
    assert(keyDepth >= 2);
    assert(state.keyPath[0] == "Playlists");
    forward key = state.keyPath[1];

    if (keyDepth == 2) {
        switch (key)
        case ("Name") {
            item.name = value;
        } case ("Playlist ID") {
            item.playlistId = Int(value);
        } case ("Playlist Persistent ID") {
            item.persistentId = value;
        } case ("Parent Persistent ID") {
            item.parentPersistentId = Maybe(value);
        } case ("Folder") {
            item.folder? = value != "false";

        } case ("Master", "Audiobooks", "Books", "Music", "Movies", "Party Shuffle") {
            item.ignored? = value != "false";
        } case ("Visible") {
            item.ignored? = value == "false";
        } case ("Distinguised Kind", "Genius Track ID") {
            item.ignored? = true;

        } else {
            break;
        }
    } else if (keyDepth == 3
        and state.keyPath[1] == "Playlist Items"
        and state.keyPath[2] == "Track ID"
    ) {
        if (not item.ignored? and not item.folder?) {
            bindStatementValues(state.playlistTrackInsertStmt,
                item.playlistId,
                Int(value),
                item.trackCount
            );
            runStatement(state.playlistTrackInsertStmt);
            item.trackCount += 1;
        }
    }
}

overload itunesFinishValue(item: ItunesPlaylist, state: ItunesParseState) {
    if (item.playlistId >= 0 and not item.ignored?) {
        bindStatementValues(state.playlistInsertStmt,
            item.playlistId,
            item.persistentId,
            item.parentPersistentId,
            item.name,
            item.folder?,
            state.playlistCount
        );
        runStatement(state.playlistInsertStmt);
    }
}

itunesStartElementHandler(
    stateP: RawPointer,
    nameC: Pointer[XML_Char],
    attrs: Pointer[Pointer[XML_Char]]
) {
    forward state = Pointer[ItunesParseState](stateP)^;
    if (just?(state.exception)) return;

    var name = CStringRef(nameC);

    push(state.tagPath, String(name));
    clear(state.tagContents);

    switch (name)
    case ("dict") {
            push(state.keyPath, String(""));
            var depth = size(state.keyPath);
            if (depth == 3 and state.keyPath[0] == "Tracks") {
                state.item = ItunesItem(PlaylistTrack());
                state.itemDepth = depth;
            } else if (depth == 2 and state.keyPath[0] == "Playlists") {
                state.item = ItunesItem(ItunesPlaylist());
                state.playlistCount += 1;
                state.itemDepth = depth;
            }
            break;
        

    } else {
        break;
    }
}

itunesEndElementHandler(stateP: RawPointer, nameC: Pointer[XML_Char]) {
    forward state = Pointer[ItunesParseState](stateP)^;
    if (just?(state.exception)) return;

    var name = CStringRef(nameC);
    var closedName = pop(state.tagPath);
    var depth = size(state.keyPath);

    if (name != closedName) {
        state.exception = Maybe(Exception(ItunesInvalidLibraryError()));
        return;
    }

    switch (name)
    case ("key") {
        state.keyPath[depth - 1] = state.tagContents; 
        
    } case ("dict") {
        if (depth == state.itemDepth) {
            try {
                itunesFinishValue(*state.item, state);
            } catch (ex) {
                state.exception = Maybe(ex);
            }
            state.item = ItunesItem(Nothing());
            state.itemDepth = 0;
        }
        pop(state.keyPath);

    } case ("array", "plist") {
        break;

    } case ("integer", "real", "string", "date", "data") {
        itunesAddToValue(*state.item, state, String(name), state.tagContents);

    } case ("true", "false") {
        itunesAddToValue(*state.item, state, String("bool"), String(name));

    } else {
        printlnTo(stderr, "unknown tag ", name);
    }
}

itunesCharacterDataHandler(stateP: RawPointer, s: Pointer[XML_Char], len: Int) {
    forward state = Pointer[ItunesParseState](stateP)^;
    if (just?(state.exception)) return;

    push(state.tagContents, mapped(Char, coordinateRange(s, s + len)));
}

importFromItunesTable(db: SqliteDB, progressCallback) {
    // NB: should already be in transaction
    alias MERGE_STAGE_COUNT = 10;

    if (not progressCallback(MergeVinylLibrary, 0, MERGE_STAGE_COUNT)) throw ImportCancelled();
    runStatement(db, "insert into artists (
            display_name, sort_name
        ) select
            i.album_artist_name as display_name,
            coalesce(max(i.album_artist_sort_name), i.album_artist_name) as sort_name
        from
            itunes_imported_tracks i
            left join artists
                on i.album_artist_name = artists.display_name
        where
            i.album_artist_name is not null
            and artists.display_name is null
        group by
            i.album_artist_name
    ");

    if (not progressCallback(MergeVinylLibrary, 1, MERGE_STAGE_COUNT)) throw ImportCancelled();
    runStatement(db, "insert into artists (
            display_name, sort_name
        ) select
            i.track_artist_name as display_name,
            coalesce(max(i.track_artist_sort_name), i.track_artist_name) as sort_name
        from
            itunes_imported_tracks i
            left join artists
                on i.track_artist_name = artists.display_name
        where
            i.track_artist_name is not null
            and artists.display_name is null
        group by
            i.track_artist_name
    ");

    if (not progressCallback(MergeVinylLibrary, 2, MERGE_STAGE_COUNT)) throw ImportCancelled();
    runStatement(db, "insert into albums (
            display_name, sort_name, album_artist_id, sides_count, compilation_p
        ) select
            i.album_name as display_name,
            coalesce(max(i.album_sort_name), i.album_name) as sort_name,
            album_artists.artist_id as album_artist_id,
            max(coalesce(i.sides_count, 1)) as sides_count,
            coalesce(i.album_compilation_p, 0) as compilation_p
        from
            itunes_imported_tracks i
            left join artists album_artists
                on i.album_artist_name = album_artists.display_name
            left join albums
                on i.album_name = albums.display_name
        where
            i.album_name is not null
            and albums.display_name is null
        group by
            i.album_name,
            album_artists.artist_id,
            coalesce(i.album_compilation_p, 0)
    ");

    if (not progressCallback(MergeVinylLibrary, 3, MERGE_STAGE_COUNT)) throw ImportCancelled();
    runStatement(db, "insert into album_sides (
            album_id, side_number, tracks_count
        ) select
            albums.album_id as album_id,
            coalesce(i.side_number, 1) as side_number,
            max(i.tracks_count) as tracks_count
        from
            itunes_imported_tracks i
            inner join albums
                on i.album_name = albums.display_name
            left join album_sides
                on albums.album_id = album_sides.album_id
                and coalesce(i.side_number, 1) = album_sides.side_number
        where
            album_sides.album_id is null
        group by
            albums.album_id,
            coalesce(i.side_number, 1)
    ");

    if (not progressCallback(MergeVinylLibrary, 4, MERGE_STAGE_COUNT)) throw ImportCancelled();
    runStatement(db, "insert into genres (name)
        select
            i.genre_name as name
        from
            itunes_imported_tracks i
            left join genres
                on i.genre_name = genres.name
        where
            i.genre_name is not null
            and genres.name is null
        group by
            i.genre_name
    ");

    if (not progressCallback(MergeVinylLibrary, 5, MERGE_STAGE_COUNT)) throw ImportCancelled();
    runStatement(db, "insert into composers (
            display_name, sort_name
        ) select
            i.composer_name as display_name,
            coalesce(max(i.composer_sort_name), i.composer_name) as sort_name
        from
            itunes_imported_tracks i
            left join composers
                on i.composer_name = composers.display_name
        where
            i.composer_name is not null
            and composers.display_name is null
        group by
            i.composer_name
    ");

    if (not progressCallback(MergeVinylLibrary, 6, MERGE_STAGE_COUNT)) throw ImportCancelled();
    runStatement(db, "insert into groupings (name)
        select
            i.grouping_name as name
        from
            itunes_imported_tracks i
            left join groupings
                on i.grouping_name = groupings.name
        where
            i.grouping_name is not null
            and groupings.name is null
        group by
            i.grouping_name
    ");

    if (not progressCallback(MergeVinylLibrary, 7, MERGE_STAGE_COUNT)) throw ImportCancelled();
    runStatement(db, "insert into tracks (
            filename, display_name, sort_name,
            album_id, track_artist_id, genre_id, composer_id, grouping_id,
            side_number, track_number,
            duration_time,
            year, comments
        ) select
            i.filename as filename,
            coalesce(max(i.name), max(i.sort_name), i.filename) as display_name,
            coalesce(max(i.sort_name), max(i.name), i.filename) as sort_name,
            max(albums.album_id) as album_id,
            max(track_artists.artist_id) as track_artist_id,
            max(genres.genre_id) as genre_id,
            max(composers.composer_id) as composer_id,
            max(groupings.grouping_id) as grouping_id,
            max(i.side_number) as side_number,
            max(i.track_number) as track_number,
            max(i.duration_time) as duration_time,
            max(i.year) as year,
            max(i.comments) as comments
        from
            itunes_imported_tracks i
            left join albums
                on i.album_name = albums.display_name
            left join artists track_artists
                on i.track_artist_name = track_artists.display_name 
            left join genres
                on i.genre_name = genres.name
            left join composers
                on i.composer_name = composers.display_name
            left join groupings
                on i.grouping_name = groupings.name
            left join tracks
                on i.filename = tracks.filename
        where
            i.filename is not null
            and tracks.filename is null
        group by
            i.filename
    ");

    if (not progressCallback(MergeVinylLibrary, 8, MERGE_STAGE_COUNT)) throw ImportCancelled();

    var folderPosition = statementValue(Int, db, "
        select coalesce(max(position), -1) from playlist_folders
    ");
    runStatement(db, "create temporary table new_playlist_folders as select
            ip.name as name
        from
            itunes_imported_playlists ip
            left join playlist_folders
                on ip.name = playlist_folders.name
        where
            ip.folder_p
            and playlist_folders.name is null
        order by
            ip.position
    ");
    runStatement(db, "insert into playlist_folders (name, position) select
            name as name,
            rowid + ? as position
        from
            new_playlist_folders
        ", folderPosition
    );
    runStatement(db, "drop table new_playlist_folders");

    var playlistPosition = statementValue(Int, db, "select max(position) from playlists");
    runStatement(db, "create temporary table max_playlist_positions as select
            playlist_folders.playlist_folder_id as playlist_folder_id,
            coalesce(max(playlists.position), -1) as position
        from
            playlist_folders
            left join playlists 
                on playlist_folders.playlist_folder_id = playlists.playlist_folder_id
        group by
            playlist_folder_id
    ");
    runStatement(db, "insert into max_playlist_positions (playlist_folder_id, position) select
            null as playlist_folder_id,
            coalesce(max(playlists.position), -1) as position
        from
            playlists
        where
            playlist_folder_id is null
    "); 
            
    runStatement(db, "create temporary table new_playlists as select
            ip.name as name,
            ip.itunes_playlist_id as itunes_playlist_id,
            playlist_folders.playlist_folder_id as playlist_folder_id,
            0 as position
        from
            itunes_imported_playlists ip
            left join itunes_imported_playlists ip_folders
                on ip.parent_persistent_id = ip_folders.itunes_playlist_persistent_id
            left join playlists
                on ip.name = playlists.name
            left join playlist_folders
                on ip_folders.name = playlist_folders.name
        where
            not ip.folder_p
            and playlists.name is null
        order by
            playlist_folders.playlist_folder_id,
            ip.position
    ");

    runStatement(db, "create temporary table min_new_playlist_positions as select
            playlist_folder_id,
            min(rowid) as position
        from
            new_playlists
        group by
            playlist_folder_id
    ");

    var basePlaylistId = statementValue(Int, db, "select max(playlist_id) from playlists");

    runStatement(db, "insert into playlists (playlist_id, name, playlist_folder_id, position) select
            new_playlists.rowid + ?,
            new_playlists.name,
            new_playlists.playlist_folder_id,
            new_playlists.rowid
                + max_playlist_positions.position
                - min_new_playlist_positions.position
                + 1 as position
        from
            new_playlists
            inner join max_playlist_positions
                on coalesce(new_playlists.playlist_folder_id, -1)
                    = coalesce(max_playlist_positions.playlist_folder_id, -1)
            inner join min_new_playlist_positions
                on coalesce(new_playlists.playlist_folder_id, -1)
                    = coalesce(min_new_playlist_positions.playlist_folder_id, -1)
    ", basePlaylistId);

    if (not progressCallback(MergeVinylLibrary, 9, MERGE_STAGE_COUNT)) throw ImportCancelled();
    
    runStatement(db, "insert into playlist_tracks (playlist_id, track_id, position) select
            playlists.playlist_id as playlist_id,
            max(tracks.track_id) as track_id,
            ipt.position as position
        from
            itunes_imported_playlist_tracks ipt
            inner join new_playlists
                on ipt.itunes_playlist_id = new_playlists.itunes_playlist_id
            inner join playlists
                on new_playlists.rowid + ? = playlists.playlist_id
            inner join itunes_imported_tracks it
                on ipt.itunes_track_id = it.itunes_track_id
            inner join tracks
                on it.filename = tracks.filename
        group by
            playlists.playlist_id,
            tracks.filename,
            ipt.position
    ", basePlaylistId);

    runStatement(db, "drop table max_playlist_positions");
    runStatement(db, "drop table new_playlists");
    runStatement(db, "drop table min_new_playlist_positions");

    if (not progressCallback(MergeVinylLibrary, 10, MERGE_STAGE_COUNT)) throw ImportCancelled();
}

importItunes(library: Library, itunesLibraryFilename: String, progressCallback) {
    withTransaction(library.db, () -> {
        runStatement(library.db, "create temporary table itunes_imported_tracks (
            itunes_track_view_id integer,
            itunes_track_id integer primary key,
            filename text not null,
            name text not null collate nocase,
            sort_name text collate nocase,
            album_name text collate nocase,
            album_sort_name text collate nocase,
            album_artist_name text collate nocase,
            album_artist_sort_name text collate nocase,
            album_compilation_p integer,
            track_artist_name text collate nocase,
            track_artist_sort_name text collate nocase,
            genre_name text collate nocase,
            composer_name text collate nocase,
            composer_sort_name text collate nocase,
            grouping_name text collate nocase,
            side_number integer,
            sides_count integer,
            track_number integer,
            tracks_count integer,
            duration_time real not null,
            year text collate nocase,
            comments text collate nocase,
            enabled_p integer,
            play_count integer,
            added_date integer,
            modified_date integer,
            played_date integer
        )");
        runStatement(library.db, "create temporary table itunes_imported_playlists (
            itunes_playlist_id integer primary key,
            itunes_playlist_persistent_id text not null unique,
            parent_persistent_id text,
            name text,
            folder_p integer not null default 0,
            position integer not null unique
        )");
        runStatement(library.db, "create temporary table itunes_imported_playlist_tracks (
            itunes_playlist_id integer not null,
            itunes_track_id integer not null,
            position integer not null,
            primary key (itunes_playlist_id, position)
        )");

        var state = ItunesParseState(
            &library,
            SqliteStatement(library.db, "insert into itunes_imported_tracks values (
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?
            )"),
            SqliteStatement(library.db, "insert into itunes_imported_playlists values (
                ?,
                ?,
                ?,
                ?,
                ?,
                ?
            )"),
            SqliteStatement(library.db, "insert into itunes_imported_playlist_tracks values (
                ?,
                ?,
                ?
            )"),
            Vector[String](),
            Vector[String](),
            String(),
            ItunesItem(Nothing()),
            SizeT(0),
            0,
            nothing(Exception),
        );
        var parser = DestroyedBy(XML_ParserCreate(null(CChar)), XML_ParserFree);

        XML_SetElementHandler(
            parser^,
            XML_StartElementHandler(itunesStartElementHandler), 
            XML_EndElementHandler(itunesEndElementHandler),
        );
        XML_SetCharacterDataHandler(
            parser^,
            XML_CharacterDataHandler(itunesCharacterDataHandler),
        );
        XML_SetUserData(parser^, RawPointer(&state));

        var file = RawFile(itunesLibraryFilename);

        parseXMLFrom(parser^, file, fileSize(file), progressCallback);

        maybe(state.exception, ex => { throw ex; });

        importFromItunesTable(library.db, progressCallback);

        runStatement(library.db, "drop table itunes_imported_tracks");
        runStatement(library.db, "drop table itunes_imported_playlists");
        runStatement(library.db, "drop table itunes_imported_playlist_tracks");

        updateLibraryFTS(library);
    });
    runStatement(library.db, "analyze");
}

overload importItunes(library: Library, itunesLibraryFilename: String) {
    importItunes(library, itunesLibraryFilename, (pos, size) => true);
}
